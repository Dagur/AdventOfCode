using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace day1
{
    class Program
    {

        static int walk(int sum, char prev, Stack<char> seq)
        {
            if (seq.TryPop(out char c))
                return walk(sum + (prev == c ? (int)char.GetNumericValue(prev) : 0), c, seq);
            return sum;
        }

        static Stack<char> stringToStack(string sequence)
        {
            char[] array = sequence.ToCharArray();
            Array.Reverse(array);
            return new Stack<char>(array);
        }
        static void Main(string[] args)
        {
            var sequence = "6837633479522485582745983529396749729546417558988158825688234469947359541391268827" +
            "86472358625661232339839216625787929174539127953527464265126499656159195885121255671868374113711798" +
            "752876214887597614296291748869722983491977224234582993231415294131913276224852494958641681813271976" +
            "6145446492632624827499944837374183996315564682884275276129314235642296435534952198748321149636128966" +
            "63757797283459522316494537116845391648931518118496533318459989985979911468813617172345179117598937923" +
            "488158187552624563786271167794954355961396172465716785311833359562441638714456742447655864463625291598" +
            "541375359621171848751922738722228998873572923129782861826362329212525747381183475211876378296238318724" +
            "373819792239556756342578891378236849241273384332485195152117967325993149216113997365712772225463323694" +
            "6113627741741979486552412398972249235653683231393759743771787378759384946883673364252937854715114639753" +
            "2997237439387663769334722979172954835154486382983716698212694357398153392926255272961384626131829678171" +
            "21956928868559714113235532278825416392388837815557394875318542315899787771868764244645744664342253654123" +
            "89797617254964262923593821685356412161242117418965525621289418241722419138735378289761727382769839152322" +
            "414515894219111215672288998539346679547862562236146215546182944671912551533952565247861597584296437565864" +
            "576391771838911622141635496885954168933831949958245342478414142475262682127619549137194521148767647457999" +
            "8279259475375962633431963119191789436811673889354879766111189966413839835481893113548698494471999239314868" +
            "1724116616741428937687985152658296679845474766477741553632712968679175356452987459761126437216758171182395" +
            "21939328919914899681376284999148467842979357862933121579699675148437578489556168215665857988751874686237175" +
            "13726924727652173747913246567452915747844952994773629646763511481836768971223668386563427459449452752636177" +
            "29359831466565694983217252594237828187612857523344265418227883219383138893873384775659548637662867572687198" +
            "263688597865118173921615178165442133987362382721444844952715592955744739873677838847693982379696776";
            Console.WriteLine(walk(0, sequence[sequence.Length - 1], stringToStack(sequence)));

            // part 2
            var shiftedSequence = sequence.Substring(sequence.Length / 2) + sequence.Substring(0, sequence.Length / 2);

            var sum = sequence.ToCharArray().Select((c, i) => c == shiftedSequence[i] ? char.GetNumericValue(c) : 0).Sum();
            Console.WriteLine(sum);

        }
    }
}
